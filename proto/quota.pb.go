// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/microhq/quota-srv/proto/quota.proto

/*
Package quota is a generated protocol buffer package.

It is generated from these files:
	github.com/microhq/quota-srv/proto/quota.proto

It has these top-level messages:
	AllocateRequest
	AllocateResponse
	Config
	Allocation
	Update
*/
package quota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AllocateResponse_Status int32

const (
	AllocateResponse_OK                       AllocateResponse_Status = 0
	AllocateResponse_REJECT_TOO_MANY_REQUESTS AllocateResponse_Status = 1
	AllocateResponse_REJECT_SERVER_ERROR      AllocateResponse_Status = 2
)

var AllocateResponse_Status_name = map[int32]string{
	0: "OK",
	1: "REJECT_TOO_MANY_REQUESTS",
	2: "REJECT_SERVER_ERROR",
}
var AllocateResponse_Status_value = map[string]int32{
	"OK": 0,
	"REJECT_TOO_MANY_REQUESTS": 1,
	"REJECT_SERVER_ERROR":      2,
}

func (x AllocateResponse_Status) String() string {
	return proto.EnumName(AllocateResponse_Status_name, int32(x))
}
func (AllocateResponse_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type AllocateRequest struct {
	// name of the resource being used e.g api.maps
	Resource string `protobuf:"bytes,1,opt,name=resource" json:"resource,omitempty"`
	// shared bucket for the client e.g ip address, service name
	Bucket string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	// resource allocation e.g 10 requests
	Allocation int64 `protobuf:"varint,3,opt,name=allocation" json:"allocation,omitempty"`
}

func (m *AllocateRequest) Reset()                    { *m = AllocateRequest{} }
func (m *AllocateRequest) String() string            { return proto.CompactTextString(m) }
func (*AllocateRequest) ProtoMessage()               {}
func (*AllocateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AllocateRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *AllocateRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *AllocateRequest) GetAllocation() int64 {
	if m != nil {
		return m.Allocation
	}
	return 0
}

type AllocateResponse struct {
	// status of this allocation
	Status AllocateResponse_Status `protobuf:"varint,1,opt,name=status,enum=AllocateResponse_Status" json:"status,omitempty"`
	// resource allocation provided
	Allocation int64 `protobuf:"varint,2,opt,name=allocation" json:"allocation,omitempty"`
}

func (m *AllocateResponse) Reset()                    { *m = AllocateResponse{} }
func (m *AllocateResponse) String() string            { return proto.CompactTextString(m) }
func (*AllocateResponse) ProtoMessage()               {}
func (*AllocateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AllocateResponse) GetStatus() AllocateResponse_Status {
	if m != nil {
		return m.Status
	}
	return AllocateResponse_OK
}

func (m *AllocateResponse) GetAllocation() int64 {
	if m != nil {
		return m.Allocation
	}
	return 0
}

// Config for the quota manager
type Config struct {
	// window over which to manage quota
	WindowSize int64 `protobuf:"varint,1,opt,name=window_size,json=windowSize" json:"window_size,omitempty"`
	// per second rate limit
	RateLimit int64 `protobuf:"varint,2,opt,name=rate_limit,json=rateLimit" json:"rate_limit,omitempty"`
	// total limit over the window
	TotalLimit int64 `protobuf:"varint,3,opt,name=total_limit,json=totalLimit" json:"total_limit,omitempty"`
	// ttl after which to expire idle bucket
	IdleTtl int64 `protobuf:"varint,4,opt,name=idle_ttl,json=idleTtl" json:"idle_ttl,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Config) GetWindowSize() int64 {
	if m != nil {
		return m.WindowSize
	}
	return 0
}

func (m *Config) GetRateLimit() int64 {
	if m != nil {
		return m.RateLimit
	}
	return 0
}

func (m *Config) GetTotalLimit() int64 {
	if m != nil {
		return m.TotalLimit
	}
	return 0
}

func (m *Config) GetIdleTtl() int64 {
	if m != nil {
		return m.IdleTtl
	}
	return 0
}

type Allocation struct {
	// name of the resource being used e.g api.maps
	Resource string `protobuf:"bytes,1,opt,name=resource" json:"resource,omitempty"`
	// shared bucket for the client e.g ip address, service name
	Bucket string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	// total used e.g 10 requests
	Total int64 `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	// time at which the allocation occurred. unix timestamp
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Allocation) Reset()                    { *m = Allocation{} }
func (m *Allocation) String() string            { return proto.CompactTextString(m) }
func (*Allocation) ProtoMessage()               {}
func (*Allocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Allocation) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *Allocation) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *Allocation) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Allocation) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Update struct {
	// unique id of this update or the sender
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// time at which it was published
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// the allocations made
	Allocations []*Allocation `protobuf:"bytes,3,rep,name=allocations" json:"allocations,omitempty"`
}

func (m *Update) Reset()                    { *m = Update{} }
func (m *Update) String() string            { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()               {}
func (*Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Update) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Update) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Update) GetAllocations() []*Allocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

func init() {
	proto.RegisterType((*AllocateRequest)(nil), "AllocateRequest")
	proto.RegisterType((*AllocateResponse)(nil), "AllocateResponse")
	proto.RegisterType((*Config)(nil), "Config")
	proto.RegisterType((*Allocation)(nil), "Allocation")
	proto.RegisterType((*Update)(nil), "Update")
	proto.RegisterEnum("AllocateResponse_Status", AllocateResponse_Status_name, AllocateResponse_Status_value)
}

func init() { proto.RegisterFile("github.com/microhq/quota-srv/proto/quota.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x6f, 0x94, 0x40,
	0x14, 0xc7, 0x0b, 0x58, 0xdc, 0x7d, 0x9b, 0x54, 0x1c, 0x8d, 0x62, 0x53, 0x75, 0xc3, 0x69, 0x2f,
	0x65, 0x75, 0xbd, 0x79, 0xdb, 0x34, 0xc4, 0xc4, 0x5f, 0x9b, 0x0e, 0xd4, 0xc4, 0x13, 0x99, 0x85,
	0xb1, 0x9d, 0x08, 0x0c, 0xcb, 0x3c, 0x6c, 0xd2, 0xb3, 0xff, 0x8e, 0xff, 0xa3, 0x61, 0x18, 0x4b,
	0x65, 0x6f, 0xbd, 0xf1, 0xfd, 0x7e, 0xdf, 0xe3, 0x33, 0x33, 0xef, 0x41, 0x78, 0x29, 0xf0, 0xaa,
	0xdd, 0x86, 0x99, 0x2c, 0x97, 0xa5, 0xc8, 0x1a, 0x79, 0xb5, 0x5b, 0xee, 0x5a, 0x89, 0xec, 0x54,
	0x35, 0xbf, 0x96, 0x75, 0x23, 0x51, 0xf6, 0x3a, 0xd4, 0xdf, 0x01, 0x87, 0x47, 0xeb, 0xa2, 0x90,
	0x19, 0x43, 0x4e, 0xf9, 0xae, 0xe5, 0x0a, 0xc9, 0x31, 0x4c, 0x1a, 0xae, 0x64, 0xdb, 0x64, 0xdc,
	0xb7, 0xe6, 0xd6, 0x62, 0x4a, 0x6f, 0x35, 0x79, 0x06, 0xee, 0xb6, 0xcd, 0x7e, 0x72, 0xf4, 0x6d,
	0x9d, 0x18, 0x45, 0x5e, 0x01, 0xb0, 0xfe, 0x37, 0x42, 0x56, 0xbe, 0x33, 0xb7, 0x16, 0x0e, 0xbd,
	0xe3, 0x04, 0x7f, 0x2c, 0xf0, 0x06, 0x8e, 0xaa, 0x65, 0xa5, 0x38, 0x79, 0x03, 0xae, 0x42, 0x86,
	0xad, 0xd2, 0x98, 0xa3, 0x95, 0x1f, 0x8e, 0x4b, 0xc2, 0x58, 0xe7, 0xd4, 0xd4, 0x8d, 0x30, 0xf6,
	0x1e, 0xe6, 0x03, 0xb8, 0x7d, 0x07, 0x71, 0xc1, 0xde, 0x7c, 0xf2, 0x0e, 0xc8, 0x09, 0xf8, 0x34,
	0xfa, 0x18, 0x9d, 0x25, 0x69, 0xb2, 0xd9, 0xa4, 0x5f, 0xd6, 0x5f, 0xbf, 0xa7, 0x34, 0x3a, 0xbf,
	0x88, 0xe2, 0x24, 0xf6, 0x2c, 0xf2, 0x1c, 0x9e, 0x98, 0x34, 0x8e, 0xe8, 0xb7, 0x88, 0xa6, 0x11,
	0xa5, 0x1b, 0xea, 0xd9, 0xc1, 0x6f, 0x0b, 0xdc, 0x33, 0x59, 0xfd, 0x10, 0x97, 0xe4, 0x35, 0xcc,
	0xae, 0x45, 0x95, 0xcb, 0xeb, 0x54, 0x89, 0x9b, 0xfe, 0x45, 0x1c, 0x0a, 0xbd, 0x15, 0x8b, 0x1b,
	0x4e, 0x5e, 0x02, 0x34, 0x0c, 0x79, 0x5a, 0x88, 0x52, 0xa0, 0x39, 0xd4, 0xb4, 0x73, 0x3e, 0x77,
	0x46, 0xd7, 0x8f, 0x12, 0x59, 0x61, 0x72, 0xf3, 0x36, 0xda, 0xea, 0x0b, 0x5e, 0xc0, 0x44, 0xe4,
	0x05, 0x4f, 0x11, 0x0b, 0xff, 0x81, 0x4e, 0x1f, 0x76, 0x3a, 0xc1, 0x22, 0x40, 0x80, 0xf5, 0xed,
	0xed, 0xee, 0x35, 0x98, 0xa7, 0x70, 0xa8, 0x51, 0x86, 0xdb, 0x0b, 0x72, 0x02, 0x53, 0x14, 0x25,
	0x57, 0xc8, 0xca, 0xda, 0x30, 0x07, 0x23, 0xe0, 0xe0, 0x5e, 0xd4, 0x39, 0x43, 0x4e, 0x8e, 0xc0,
	0x16, 0xb9, 0x61, 0xd9, 0x22, 0xff, 0xbf, 0xcf, 0x1e, 0xf5, 0x91, 0x53, 0x98, 0x0d, 0xb3, 0x50,
	0xbe, 0x33, 0x77, 0x16, 0xb3, 0xd5, 0x2c, 0x1c, 0x6e, 0x40, 0xef, 0xe6, 0xab, 0xf7, 0x70, 0x78,
	0xde, 0x6d, 0x22, 0x79, 0x0b, 0x93, 0x7f, 0x83, 0x27, 0x5e, 0x38, 0x5a, 0xc7, 0xe3, 0xc7, 0x7b,
	0x5b, 0x11, 0x1c, 0x6c, 0x5d, 0xbd, 0xbd, 0xef, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x48,
	0x8b, 0x31, 0xef, 0x02, 0x00, 0x00,
}
